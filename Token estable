pragma solidity ^0.8.2;

import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/security/Pausable.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";

interface AggregatorV3Interface {
  function decimals() external view returns (uint8);
  function latestRoundData() external view returns (
    uint80 roundId,
    int256 answer,
    uint256 startedAt,
    uint256 updatedAt,
    uint80 answeredInRound
  );
}

contract Token is ERC20, Ownable, Pausable, ReentrancyGuard {
  
  string public constant name = "Micro Econom√≠a Digital";
  string public constant symbol = "MED";
  uint8 public constant decimals = 18;
  
  uint256 public constant totalSupply = 100000000 * 10**18; // 100,000,000 tokens
  
  AggregatorV3Interface public priceFeed;

  constructor(AggregatorV3Interface _priceFeed) ERC20(name, symbol) {
    _mint(msg.sender, totalSupply);
    _transferOwnership(msg.sender);
    priceFeed = _priceFeed;
  }
  
  function transfer(address to, uint256 amount) public override whenNotPaused returns (bool) {
    require(to != address(0), "Invalid recipient");
    require(amount <= balanceOf(msg.sender), "Insufficient balance");
    
    _transfer(msg.sender, to, amount);
    return true;
  }
  
  function transferFrom(address from, address to, uint256 amount) public override whenNotPaused returns (bool) {
    require(to != address(0), "Invalid recipient");
    require(amount <= balanceOf(from), "Insufficient balance");
    require(amount <= allowance[from][msg.sender], "Insufficient allowance");
    
    _transfer(from, to, amount);
    _approve(from, msg.sender, allowance[from][msg.sender] - amount);
    return true;
  }
  
  function approve(address spender, uint256 amount) public override whenNotPaused returns (bool) {
    require(spender != address(0), "Invalid spender");
    
    _approve(msg.sender, spender, amount);
    return true;
  }
  
  function burn(uint256 amount) public onlyOwner whenNotPaused {
    require(amount <= balanceOf(msg.sender), "Insufficient balance");
    
    _burn(msg.sender, amount);
  }
  
  function burnFrom(address from, uint256 amount) public onlyOwner whenNotPaused {
    require(from != address(0), "Invalid address");
    require(amount <= balanceOf(from), "Insufficient balance");
    require(amount <= allowance[from][msg.sender], "Insufficient allowance");
    
    _burn(from, amount);
    _approve(from, msg.sender, allowance[from][msg.sender] - amount);
  }
  
  function mint(address to, uint256 amount) public onlyOwner whenNotPaused {
    require(to != address(0), "Invalid recipient");
    require(totalSupply + amount <= maxSupply, "Max supply reached");
    
    _mint(to, amount);
  }
  
  function rebase() public onlyOwner whenNotPaused {
    uint256 exchangeRate = getExchangeRate();
    uint256 newTotalSupply = totalSupply * exchangeRate / 1e18;

    if (exchangeRate > 1e18) {
      _burn(address(this), newTotalSupply - totalSupply);
    } else if (exchangeRate < 1e18) {
      _mint(address(this), newTotalSupply - totalSupply);
    }

    totalSupply = newTotalSupply;
  }

  function getExchangeRate() public view returns (uint256) {
    (, int256 answer, , , ) = priceFeed.latestRoundData();
    return uint256(answer * 10**10); // 10 decimals
